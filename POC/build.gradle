
import com.google.gson.JsonArray
import com.google.gson.JsonElement
import com.google.gson.JsonObject
import com.google.gson.JsonParser

group 'org.example'

apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.bodar.com'
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:0.1.0'
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0-alpha-5'

    compile group: 'io.cucumber', name: 'cucumber-java', version: '5.7.0'

    testCompile group: 'org.testng', name: 'testng', version: '7.1.0'

    testCompile group: 'io.cucumber', name: 'cucumber-testng', version: '6.0.0-RC2'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
}

tasks.withType(Test) {
    useTestNG()

    testLogging.showStandardStreams = true

    scanForTestClasses = false

    ignoreFailures = true
}

task run(type: Test) {
    options {
        jvmArgs = ['-Dcucumber.execution.strict=' + true]
        jvmArgs = ['-Dcucumber.filter.tags=' + filterTags  ]
    }
    println("Test cases Executed...!!")
}


task rerun(dependsOn: 'run', type: Test) {
    systemProperty "build.properties", 'buildRetry.properties'
   File rerunFile = new File('build/cucumber/rerun.txt')
    if (rerunFile.exists() && !rerunFile.getText().isEmpty()) {
        options {
            useDefaultListeners = false
            jvmArgs = ['-Dcucumber.options=@build/cucumber/rerun.txt ' +
                               '--glue steps ' +
                               '--plugin pretty ' +
                               '--plugin json:build/cucumber/retry/cucumber.json ' +
                               '--plugin rerun:build/cucumber/retry/rerun.txt ' ]
        }
    }

   doLast {
        File rerunCucumberJson = new File('build/cucumber/retry/cucumber.json')
        if (rerunCucumberJson.exists()) {
            mergeJson("build/cucumber/cucumber.json", "build/cucumber/retry/cucumber.json", "build/cucumber/cucumberMerged.json")
            println("Jsons Merged..!!")
        }
    }
}

JsonArray readJson(String jsonPath) {
    JsonParser parser = new JsonParser();
    FileReader jsonFile = new FileReader(jsonPath);
    return (JsonArray) parser.parse(jsonFile);
}

def mergeJson(String cucumberFile, String retriedCucumberFile, String newCucumberFile)  {
    final String Name = "name";
    final String Elements = "elements";

    // Load Cucumber.json Files.
    JsonArray cucumberJson = readJson(cucumberFile);
    JsonArray cucumberJsonRetry = readJson(retriedCucumberFile);

    //Instance new Json cucumber.
    JsonArray newCucumberJson = new JsonArray();

    // Iterate  features
    for (int indexCucumberJson = 0; indexCucumberJson < cucumberJson.size(); indexCucumberJson++) {
        JsonObject featureJson = (JsonObject) cucumberJson.get(indexCucumberJson);

        // Iterate retry features
        for (int indexCucumberJsonRetry = 0; indexCucumberJsonRetry < cucumberJsonRetry.size(); indexCucumberJsonRetry++) {
            JsonObject retryFeatureJson = (JsonObject) cucumberJsonRetry.get(indexCucumberJsonRetry);
            JsonArray newCucumberScenariosArray = new JsonArray();

            if (featureJson.get(Name) == retryFeatureJson.get(Name)) {

                // Iterate scenarios
                JsonArray scenariosJson = featureJson.getAsJsonArray(Elements);

                for (int i = 0; i < scenariosJson.size(); i++) {
                    JsonObject scenarioJson = scenariosJson.get(i).getAsJsonObject();

                    // Iterate retry scenarios
                    JsonArray scenariosRetryJson = retryFeatureJson.getAsJsonArray(Elements);

                    for (int x = 0; x < scenariosRetryJson.size(); x++) {
                        JsonObject scenarioRetryJson = scenariosRetryJson.get(x).getAsJsonObject();

                        if (scenarioJson.get(Name) == scenarioRetryJson.get(Name)) {
                            newCucumberScenariosArray.add(scenarioRetryJson);
                            break;
                        } else if (x == scenariosRetryJson.size() - 1) {
                            newCucumberScenariosArray.add(scenarioJson);
                        }
                    }
                }

                // Add retry feature
                featureJson.add(Elements, newCucumberScenariosArray);
                newCucumberJson.add(featureJson);
                break;
            } else if(indexCucumberJsonRetry == cucumberJsonRetry.size() - 1) {
                newCucumberJson.add(featureJson);
            }
        }
    }

    // Create cucumber json Merged.
    JsonElement newCucumberJsonAux = (JsonElement) newCucumberJson;
    createNewCucumberJson(newCucumberJsonAux.getAsJsonArray().toString(), newCucumberFile);
}

def createNewCucumberJson(String jsonString, String newCucumberFile) {
    FileWriter writerCucumberJson = new FileWriter(newCucumberFile);
    writerCucumberJson.write(jsonString);
    writerCucumberJson.close();
}
